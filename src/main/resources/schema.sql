-- Users table - stores user information from GitHub OAuth
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6),
    avatar_url VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    github_id VARCHAR(255) NOT NULL UNIQUE,
    nickname VARCHAR(255) NOT NULL UNIQUE
);

-- User roles table - stores user permissions
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role VARCHAR(255) CHECK (role IN ('TEAM_LEAD','MEMBER')),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Teams table - stores team information
CREATE TABLE teams (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    github_organization_url VARCHAR(500),
    owner_id BIGINT NOT NULL,
    FOREIGN KEY (owner_id) REFERENCES users(id)
);

-- Team members table - many-to-many relationship between users and teams
CREATE TABLE team_members (
    team_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    FOREIGN KEY (team_id) REFERENCES teams(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Projects table - stores GitHub repository projects
CREATE TABLE projects (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6),
    team_id BIGINT NOT NULL,
    github_access_token VARCHAR(255),
    github_repo_id VARCHAR(255),
    github_repo_url VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    webhook_secret VARCHAR(255),
    FOREIGN KEY (team_id) REFERENCES teams(id)
);

-- Tasks table - stores project tasks parsed from commit messages
CREATE TABLE tasks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6),
    assignee_id BIGINT,
    project_id BIGINT NOT NULL,
    feature_code VARCHAR(255) NOT NULL,
    github_issue_url VARCHAR(255),
    milestone VARCHAR(255),
    status VARCHAR(255) NOT NULL CHECK (status IN ('TODO','IN_PROGRESS','DONE')),
    tags TEXT,
    title VARCHAR(255) NOT NULL,
    declined_by_id BIGINT,
    declined_at TIMESTAMP(6),
    decline_reason TEXT,
    FOREIGN KEY (assignee_id) REFERENCES users(id),
    FOREIGN KEY (project_id) REFERENCES projects(id),
    FOREIGN KEY (declined_by_id) REFERENCES users(id)
);

-- Commits table - stores GitHub commit information
CREATE TABLE commits (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    committed_at TIMESTAMP(6),
    project_id BIGINT NOT NULL,
    task_id BIGINT,
    author_email VARCHAR(255),
    author_name VARCHAR(255),
    github_url VARCHAR(255),
    message VARCHAR(255) NOT NULL,
    sha VARCHAR(255) NOT NULL,
    FOREIGN KEY (project_id) REFERENCES projects(id),
    FOREIGN KEY (task_id) REFERENCES tasks(id)
);

-- Notifications table - stores user notifications
CREATE TABLE notifications (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP(6) NOT NULL,
    is_read BOOLEAN NOT NULL,
    task_id BIGINT,
    user_id BIGINT NOT NULL,
    message VARCHAR(255) NOT NULL,
    FOREIGN KEY (task_id) REFERENCES tasks(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Team invitations table - stores team invitation requests
CREATE TABLE team_invitations (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP(6) NOT NULL,
    updated_at TIMESTAMP(6),
    responded_at TIMESTAMP(6),
    team_id BIGINT NOT NULL,
    inviter_id BIGINT NOT NULL,
    invitee_id BIGINT,
    invitee_github_url VARCHAR(500) NOT NULL,
    status VARCHAR(20) NOT NULL DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'ACCEPTED', 'REJECTED')),
    message TEXT,
    FOREIGN KEY (team_id) REFERENCES teams(id),
    FOREIGN KEY (inviter_id) REFERENCES users(id),
    FOREIGN KEY (invitee_id) REFERENCES users(id)
);

-- Messages table - stores team chat messages
CREATE TABLE messages (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    content TEXT NOT NULL,
    sender_id BIGINT NOT NULL,
    team_id BIGINT NOT NULL,
    created_at TIMESTAMP(6) NOT NULL,
    FOREIGN KEY (sender_id) REFERENCES users(id),
    FOREIGN KEY (team_id) REFERENCES teams(id)
);

-- Message reactions table - stores emoji reactions to messages
CREATE TABLE message_reactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    message_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    emoji VARCHAR(10) NOT NULL,
    created_at TIMESTAMP(6) NOT NULL,
    FOREIGN KEY (message_id) REFERENCES messages(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id),
    UNIQUE(message_id, user_id, emoji)
);