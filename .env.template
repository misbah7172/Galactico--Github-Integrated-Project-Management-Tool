# Galactico CI/CD Generator Environment Configuration
# Copy this file to .env and fill in your actual values

# ========================
# DATABASE CONFIGURATION
# ========================
# PostgreSQL Database (NeonDB)
DB_URL=jdbc:postgresql://ep-royal-dew-ad5ccvfm-pooler.c-2.us-east-1.aws.neon.tech:5432/neondb?sslmode=require
DB_USERNAME=neondb_owner
DB_PASSWORD=npg_OimpNMHWXR39

# ========================
# GITHUB OAUTH CONFIGURATION
# ========================
# GitHub OAuth App for web application
GITHUB_CLIENT_ID=your_github_client_id
GITHUB_CLIENT_SECRET=your_github_client_secret
OAUTH_REDIRECT_URI=http://localhost:5000/login/oauth2/code/github

# GitHub OAuth App for VS Code Extension
GITHUB_EXTENSION_CLIENT_ID=your_extension_client_id
GITHUB_EXTENSION_CLIENT_SECRET=your_extension_client_secret
OAUTH_EXTENSION_REDIRECT_URI=vscode://publisher.autotrack

# ========================
# SLACK INTEGRATION
# ========================
# Slack Webhook URL for notifications
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# ========================
# CI/CD CONFIGURATION
# ========================
# Local workspace path for saving CI/CD files
CICD_LOCAL_WORKSPACE_PATH=${user.home}/galactico-workspace

# GitHub Personal Access Token for CI/CD operations (optional, can use project tokens)
GITHUB_PERSONAL_ACCESS_TOKEN=your_github_personal_access_token

# ========================
# DOCKER CONFIGURATION
# ========================
# DockerHub credentials for Docker-based CI/CD
DOCKERHUB_USERNAME=your_dockerhub_username
DOCKERHUB_TOKEN=your_dockerhub_access_token

# ========================
# AWS CONFIGURATION
# ========================
# AWS credentials for Lambda deployments
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_secret_key
AWS_REGION=us-east-1
AWS_S3_BUCKET=your-s3-bucket-name

# ========================
# DEPLOYMENT ENVIRONMENTS
# ========================
# Staging environment configuration
STAGING_URL=https://staging.yourapp.com
STAGING_TOKEN=your_staging_deployment_token

# Production environment configuration
PRODUCTION_URL=https://production.yourapp.com
PRODUCTION_TOKEN=your_production_deployment_token

# ========================
# SERVER CONFIGURATION
# ========================
SERVER_PORT=5000
SERVER_ADDRESS=localhost

# ========================
# SECURITY CONFIGURATION
# ========================
# JWT Secret for token generation (generate a random string)
JWT_SECRET=your_jwt_secret_key_here

# GitHub webhook secret (generate a random string)
GITHUB_WEBHOOK_SECRET=your_webhook_secret_here

# ========================
# NOTIFICATION CONFIGURATION
# ========================
# Email configuration for notifications
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_email_password

# ========================
# CI/CD SECRETS DOCUMENTATION
# ========================
# The following secrets should be configured in your GitHub repository
# Settings > Secrets and variables > Actions:

# For Docker deployments:
# - DOCKERHUB_USERNAME
# - DOCKERHUB_TOKEN
# - DOCKER_HOST (if deploying to remote Docker host)

# For AWS Lambda deployments:
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - AWS_REGION
# - LAMBDA_FUNCTION_NAME

# For staging/production deployments:
# - STAGING_URL
# - STAGING_TOKEN
# - PRODUCTION_URL
# - PRODUCTION_TOKEN

# For React/S3 deployments:
# - AWS_S3_BUCKET
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY

# ========================
# EXAMPLE GITHUB SECRETS
# ========================
# Example of secrets you might need to add to your GitHub repository:
# DOCKERHUB_USERNAME=myusername
# DOCKERHUB_TOKEN=dckr_pat_1234567890abcdef
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# AWS_REGION=us-east-1
# AWS_S3_BUCKET=my-app-bucket
# LAMBDA_FUNCTION_NAME=my-lambda-function
# STAGING_URL=https://staging-api.myapp.com
# STAGING_TOKEN=staging_deploy_token_here
# PRODUCTION_URL=https://api.myapp.com
# PRODUCTION_TOKEN=production_deploy_token_here
